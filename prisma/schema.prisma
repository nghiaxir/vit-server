// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider  = "prisma-erd-generator"
//   tableOnly = true
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int              @id @default(autoincrement())
  username    String           @unique
  password    String
  fullname    String
  email       String           @unique
  phone       String           @unique
  bio         String?
  avatar      String?
  birthday    DateTime?
  hometown    String?
  address     String?
  school      String?
  student_id  String?
  class       String?
  cccd        String?
  date_join   DateTime?
  date_out    DateTime?
  last_login  DateTime?
  gender      Gender           @default(OTHER)
  status      Status           @default(INACTIVE)
  position    Position         @default(MEMBER)
  social      UserSocial[]
  activities  UserActivity[]
  groups      GroupUser[]
  departments DepartmentUser[]
  clubs       ClubUser[]
  events      UserEvent[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}

model Social {
  id       Int          @id @default(autoincrement())
  type     String       @unique
  icon     String
  base_url String
  users    UserSocial[]
}

model UserSocial {
  id        Int     @id @default(autoincrement())
  user_id   Int
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  social_id Int
  social    Social  @relation(fields: [social_id], references: [id], onDelete: Cascade)
  value     String
  default   Boolean @default(false)
}

model Activity {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  location    String
  deadline    DateTime
  times       ActivityTime[]
  event_id    Int?
  event       Event?         @relation(fields: [event_id], references: [id], onDelete: Cascade)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  deleted_at  DateTime?
}

model ActivityTime {
  id           Int            @id @default(autoincrement())
  name         String
  start_time   DateTime
  end_time     DateTime
  activity_id  Int
  activity     Activity       @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  UserActivity UserActivity[]
}

model UserActivity {
  id         Int                @id @default(autoincrement())
  user_id    Int
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  time_id    Int
  times      ActivityTime       @relation(fields: [time_id], references: [id], onDelete: Cascade)
  status     UserActivityStatus @default(REGISTERED)
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  @@unique([user_id, time_id])
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  start_time  DateTime
  end_time    DateTime
  location    String
  activities  Activity[]
  users       UserEvent[]
  groups      Group[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?
}

model UserEvent {
  id         Int                @id @default(autoincrement())
  user_id    Int
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event_id   Int
  event      Event              @relation(fields: [event_id], references: [id], onDelete: Cascade)
  position   Position           @default(MEMBER)
  status     UserActivityStatus @default(REGISTERED)
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  @@unique([user_id, event_id])
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  event_id    Int?
  event       Event?      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  users       GroupUser[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?
}

model GroupUser {
  id         Int      @id @default(autoincrement())
  group_id   Int
  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  position   Position @default(MEMBER)
  status     Status   @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([group_id, user_id])
}

model Department {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  users       DepartmentUser[]
  clubs       Club[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  deleted_at  DateTime?
}

model DepartmentUser {
  id            Int        @id @default(autoincrement())
  department_id Int
  department    Department @relation(fields: [department_id], references: [id], onDelete: Cascade)
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  position      Position   @default(MEMBER)
  status        Status     @default(ACTIVE)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  @@unique([department_id, user_id])
}

model Club {
  id            Int        @id @default(autoincrement())
  name          String
  description   String
  department_id Int
  department    Department @relation(fields: [department_id], references: [id], onDelete: Cascade)
  users         ClubUser[]
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?
}

model ClubUser {
  id         Int      @id @default(autoincrement())
  club_id    Int
  club       Club     @relation(fields: [club_id], references: [id], onDelete: Cascade)
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  position   Position @default(MEMBER)
  status     Status   @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([club_id, user_id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Position {
  ADMIN
  DOI_TRUONG
  DOI_PHO
  TRUONG_PHONG_TRAO
  PHO_PHONG_TRAO
  TRUONG_HANH_CHINH
  PHO_HANH_CHINH
  TRUONG_HAU_CAN
  PHO_HAU_CAN
  TRUONG_TRUYEN_THONG
  PHO_TRUYEN_THONG
  CN_MEDIA
  CN_GUITAR
  CN_DANCER
  NHOM_TRUONG
  NHOM_PHO
  MEMBER
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserActivityStatus {
  REGISTERED
  ACCEPTED
  CANCLED
}
